import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
import "primitives/pipelined.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
    h = std_reg(32);
    i = std_reg(32);
    @generated fsm = std_reg(2);
    @generated adder = std_add(2);
    @generated fsm0 = std_reg(2);
    @generated adder0 = std_add(2);
    @generated fsm1 = std_reg(1);
    @generated adder1 = std_add(1);
    @generated fsm2 = std_reg(3);
    @generated adder2 = std_add(3);
    @generated fsm3 = std_reg(2);
    @generated adder3 = std_add(2);
    @generated fsm4 = std_reg(1);
    @generated adder4 = std_add(1);
    @generated fsm5 = std_reg(5);
    @generated adder5 = std_add(5);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated ud1 = undef(1);
    @generated ud2 = undef(1);
    @generated ud3 = undef(1);
    @generated ud4 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group early_reset_static_seq {
      a.write_en = fsm.out == 2'd0 & 1'b1 ? 1'd1;
      a.in = fsm.out == 2'd0 & 1'b1 ? 32'd2;
      b.write_en = fsm.out == 2'd1 & 1'b1 ? 1'd1;
      b.in = fsm.out == 2'd1 & 1'b1 ? 32'd2;
      early_reset_static_par[go] = fsm.out == 2'd2 & 1'b1 ? 1'd1;
      h.write_en = fsm.out == 2'd3 & 1'b1 ? 1'd1;
      h.in = fsm.out == 2'd3 & 1'b1 ? 32'd2;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 2'd1;
      fsm.in = fsm.out == 2'd2 & fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19 & 1'b1 ? adder.out;
      fsm.write_en = fsm.out == 2'd2 & fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19 & 1'b1 ? 1'd1;
      fsm.in = fsm.out != 2'd2 & fsm.out != 2'd3 ? adder.out;
      fsm.write_en = fsm.out != 2'd2 & fsm.out != 2'd3 ? 1'd1;
      fsm.in = fsm.out == 2'd3 ? 2'd0;
      fsm.write_en = fsm.out == 2'd3 ? 1'd1;
    }
    group early_reset_static_par<"par"=1> {
      early_reset_static_seq0[go] = (fsm3.out == 2'd1 & (1'b1 & fsm5.out == 5'd0 | 1'b1 & fsm5.out == 5'd10 | fsm5.out >= 5'd1 & fsm5.out < 5'd10) | fsm3.out == 2'd0) & 1'b1 ? 1'd1;
      early_reset_static_seq2[go] = 1'b1 & 1'b1 ? 1'd1;
      early_reset_static_par[done] = ud0.out;
    }
    group early_reset_static_seq0 {
      c.write_en = fsm0.out == 2'd0 & 1'b1 ? 1'd1;
      c.in = fsm0.out == 2'd0 & 1'b1 ? 32'd2;
      d.write_en = fsm0.out == 2'd1 & 1'b1 ? 1'd1;
      d.in = fsm0.out == 2'd1 & 1'b1 ? 32'd2;
      early_reset_static_seq1[go] = fsm0.out == 2'd2 & 1'b1 ? 1'd1;
      early_reset_static_seq0[done] = ud1.out;
      adder0.left = fsm0.out;
      adder0.right = 2'd1;
      fsm0.in = fsm0.out != 2'd2 & !(fsm0.out == 2'd2 & fsm1.out == 1'd1 & fsm2.out == 3'd4) ? adder0.out;
      fsm0.write_en = fsm0.out != 2'd2 & !(fsm0.out == 2'd2 & fsm1.out == 1'd1 & fsm2.out == 3'd4) ? 1'd1;
      fsm0.in = fsm0.out == 2'd2 & fsm1.out == 1'd1 & fsm2.out == 3'd4 ? 2'd0;
      fsm0.write_en = fsm0.out == 2'd2 & fsm1.out == 1'd1 & fsm2.out == 3'd4 ? 1'd1;
    }
    group early_reset_static_seq1 {
      e.write_en = fsm1.out == 1'd0 & fsm2.out == 3'd0 ? 1'd1;
      e.in = fsm1.out == 1'd0 & fsm2.out == 3'd0 ? 32'd2;
      f.write_en = fsm1.out == 1'd1 & fsm2.out == 3'd0 ? 1'd1;
      f.in = fsm1.out == 1'd1 & fsm2.out == 3'd0 ? 32'd2;
      early_reset_static_seq1[done] = ud2.out;
      adder1.left = fsm1.out;
      adder1.right = 1'd1;
      fsm1.in = fsm1.out != 1'd1 ? adder1.out;
      fsm1.write_en = fsm1.out != 1'd1 ? 1'd1;
      fsm1.in = fsm1.out == 1'd1 ? 1'd0;
      fsm1.write_en = fsm1.out == 1'd1 ? 1'd1;
      adder2.left = fsm2.out;
      adder2.right = 3'd1;
      fsm2.in = fsm1.out == 1'd1 & fsm2.out != 3'd4 ? adder2.out;
      fsm2.write_en = fsm1.out == 1'd1 & fsm2.out != 3'd4 ? 1'd1;
      fsm2.in = fsm1.out == 1'd1 & fsm2.out == 3'd4 ? 3'd0;
      fsm2.write_en = fsm1.out == 1'd1 & fsm2.out == 3'd4 ? 1'd1;
    }
    group early_reset_static_seq2 {
      g.write_en = fsm3.out == 2'd0 & 1'b1 ? 1'd1;
      g.in = fsm3.out == 2'd0 & 1'b1 ? 32'd2;
      early_reset_H[go] = fsm3.out == 2'd1 & 1'b1 ? 1'd1;
      early_reset_static_seq2[done] = ud3.out;
      adder3.left = fsm3.out;
      adder3.right = 2'd1;
      fsm3.in = fsm3.out != 2'd1 & !(fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19) ? adder3.out;
      fsm3.write_en = fsm3.out != 2'd1 & !(fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19) ? 1'd1;
      fsm3.in = fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19 ? 2'd0;
      fsm3.write_en = fsm3.out == 2'd1 & 1'b1 & fsm5.out == 5'd19 ? 1'd1;
    }
    group early_reset_H {
      g.write_en = 1'd1;
      g.in = 32'd2;
      early_reset_H[done] = ud4.out;
      adder4.left = fsm4.out;
      adder4.right = 1'd1;
      fsm4.in = fsm4.out != 1'd0 ? adder4.out;
      fsm4.write_en = fsm4.out != 1'd0 ? 1'd1;
      fsm4.in = fsm4.out == 1'd0 ? 1'd0;
      fsm4.write_en = fsm4.out == 1'd0 ? 1'd1;
      adder5.left = fsm5.out;
      adder5.right = 5'd1;
      fsm5.in = fsm4.out == 1'd0 & fsm5.out != 5'd19 ? adder5.out;
      fsm5.write_en = fsm4.out == 1'd0 & fsm5.out != 5'd19 ? 1'd1;
      fsm5.in = fsm4.out == 1'd0 & fsm5.out == 5'd19 ? 5'd0;
      fsm5.write_en = fsm4.out == 1'd0 & fsm5.out == 5'd19 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 2'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 2'd3 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd1;
    signal_reg.in = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd0;
  }
  control {
    wrapper_early_reset_static_seq;
  }
}
