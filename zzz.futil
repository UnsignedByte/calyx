import "primitives/core.futil";
import "primitives/memories/seq.futil";
import "primitives/binary_operators.futil";
component main(@go go: 1, @clk clk: 1, @reset reset: 1) -> (@done done: 1) {
  cells {
    res1 = std_reg(32);
    res2 = std_reg(32);
    add1 = std_add(32);
    mult1 = std_mult_pipe(32);
    @external m = seq_mem_d1(32, 1, 1);
    @generated fsm = std_reg(2);
    @generated adder = std_add(2);
    @generated fsm0 = std_reg(3);
    @generated adder0 = std_add(3);
    @generated fsm1 = std_reg(3);
    @generated adder1 = std_add(3);
    @generated ud = undef(1);
    @generated ud0 = undef(1);
    @generated signal_reg = std_reg(1);
  }
  wires {
    group early_reset_static_seq {
      add1.left = fsm.out == 2'd0 ? res1.out;
      add1.right = fsm.out == 2'd0 ? 32'd1;
      early_reset_static_seq0[go] = fsm.out == 2'd1 ? 1'd1;
      res1.write_en = fsm.out == 2'd0 ? 1'd1;
      res1.in = fsm.out == 2'd0 ? add1.out;
      early_reset_static_seq[done] = ud.out;
      adder.left = fsm.out;
      adder.right = 2'd1;
      fsm.in = fsm.out != 2'd1 & !(fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4) ? adder.out;
      fsm.write_en = fsm.out != 2'd1 & !(fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4) ? 1'd1;
      fsm.in = fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4 ? 2'd0;
      fsm.write_en = fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4 ? 1'd1;
    }
    group early_reset_static_seq0 {
      mult1.left = fsm0.out < 3'd3 ? res1.out;
      mult1.go = fsm0.out < 3'd3 ? 1'd1;
      mult1.right = fsm0.out < 3'd3 ? 32'd2;
      res1.write_en = fsm0.out == 3'd3 ? 1'd1;
      res1.in = fsm0.out == 3'd3 ? mult1.out;
      early_reset_static_seq0[done] = ud0.out;
      adder0.left = fsm0.out;
      adder0.right = 3'd1;
      fsm0.in = fsm0.out != 3'd3 ? adder0.out;
      fsm0.write_en = fsm0.out != 3'd3 ? 1'd1;
      fsm0.in = fsm0.out == 3'd3 ? 3'd0;
      fsm0.write_en = fsm0.out == 3'd3 ? 1'd1;
      adder1.left = fsm1.out;
      adder1.right = 3'd1;
      fsm1.in = fsm0.out == 3'd3 & fsm1.out != 3'd4 ? adder1.out;
      fsm1.write_en = fsm0.out == 3'd3 & fsm1.out != 3'd4 ? 1'd1;
      fsm1.in = fsm0.out == 3'd3 & fsm1.out == 3'd4 ? 3'd0;
      fsm1.write_en = fsm0.out == 3'd3 & fsm1.out == 3'd4 ? 1'd1;
    }
    group wrapper_early_reset_static_seq {
      early_reset_static_seq[go] = 1'd1;
      signal_reg.write_en = fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      signal_reg.in = fsm.out == 2'd1 & fsm0.out == 3'd3 & fsm1.out == 3'd4 & 1'b1 & !signal_reg.out ? 1'd1;
      wrapper_early_reset_static_seq[done] = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd1;
    }
    signal_reg.write_en = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd1;
    signal_reg.in = fsm.out == 2'd0 & 1'b1 & signal_reg.out ? 1'd0;
  }
  control {
    wrapper_early_reset_static_seq;
  }
}
