import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";
import "primitives/pipelined.futil";

/**
* Checks to see if the FSM generated for seq activates a component for
* exactly the right amount of time.
* Regression: https://github.com/calyxir/calyx/pull/446
*/

component main() -> () {
  cells {
    a = std_reg(32);
    b = std_reg(32);
    c = std_reg(32);
    d = std_reg(32);
    e = std_reg(32);
    f = std_reg(32);
    g = std_reg(32);
    h = std_reg(32);
    i = std_reg(32);
  }
  wires {
    static<1> group A {
      a.write_en = 1'd1;
      a.in = 32'd2;
    }
    static<1> group B {
      b.write_en = 1'd1;
      b.in = 32'd2;
    }
    static<1> group C {
      c.write_en = 1'd1;
      c.in = 32'd2;
    }
    static<1> group D {
      d.write_en = 1'd1;
      d.in = 32'd2;
    }
    static<1> group E {
      e.write_en = 1'd1;
      e.in = 32'd2;
    }
    static<1> group F {
      f.write_en = 1'd1;
      f.in = 32'd2;
    }
    static<1> group G {
      g.write_en = 1'd1;
      g.in = 32'd2;
    }
    static<1> group H {
      g.write_en = 1'd1;
      g.in = 32'd2;
    }
    static<1> group I {
      h.write_en = 1'd1;
      h.in = 32'd2;
    }
    static<1> group J {
      i.write_en = 1'd1;
      i.in = 32'd2;
    }
  }
  control {
    static seq {
      A; B;
      static par {
        static seq {
          C; D;
          static repeat 5 {
            static seq { E; F;}
          }
        }
        static seq {
          G;
          static repeat 20 {
            H;
          }
        }
      }
      I;
    }
  }
}
