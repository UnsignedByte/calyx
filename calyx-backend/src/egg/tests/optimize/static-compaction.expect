import "primitives/binary_operators.futil";
import "primitives/core.futil";
import "primitives/math.futil";
import "primitives/memories/comb.futil";
import "primitives/memories/seq.futil";

component main() -> () {
  cells {
    a_reg = std_reg(32);
    b_reg = std_reg(32);
    c_reg = std_reg(32);
    d_reg = std_reg(32);
    a = std_add(32);
    ud = undef(1);
  }
  wires {
    group A<"promotable"=1> {
      a_reg.in = 32'd5;
      a_reg.write_en = 1'd1;
      A[done] = a_reg.done;
    }
    group B<"promotable"=10> {
      b_reg.in = 32'd10;
      b_reg.write_en = 1'd1;
      B[done] = ud.out;
    }
    group C<"promotable"=1> {
      a.left = a_reg.out;
      a.right = b_reg.out;
      c_reg.in = a.out;
      c_reg.write_en = 1'd1;
      C[done] = c_reg.done;
    }
    group D<"promotable"=10> {
      d_reg.in = a_reg.out;
      d_reg.write_en = 1'd1;
      D[done] = ud.out;
    }
  }
  control {
    @promotable(22) seq {
@promotable(1)       A;
@promotable(10)       B;
@promotable(1)       C;
@promotable(10)       D;
    }
  }
}
