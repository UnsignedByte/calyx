import "primitives/binary_operators.futil";
import "primitives/core.futil";
import "primitives/math.futil";
import "primitives/memories/comb.futil";
import "primitives/memories/seq.futil";

component main() -> () {
  cells {
    @data a_reg = std_reg(32);
    @data b_reg = std_reg(32);
    @data c_reg = std_reg(32);
    @data a = std_add(32);
    @control ud = undef(1);
    @generated comb_reg = std_reg(32);
  }
  wires {
    static<9> group no-op {
    }
    static<1> group invoke00 {
      a_reg.write_en = 1'd1;
      a_reg.in = 32'd5;
    }
    static<1> group invoke10 {
      c_reg.write_en = 1'd1;
      c_reg.in = a.out;
      a.right = b_reg.out;
      a.left = a_reg.out;
    }
    static<10> group B0 {
      b_reg.write_en = 1'd1;
      b_reg.in = 32'd10;
    }
    static<10> group D0 {
    }
  }
  control {
    @static(11) @promoted static par {
      @static(11) static seq {
        @promotable invoke00;
        @promotable(9) no-op;
        @promotable invoke10;
      }
      @NODE_ID(2) @promotable(10) B0;
      @NODE_ID(4) @promotable(10) D0;
    }
  }
}
