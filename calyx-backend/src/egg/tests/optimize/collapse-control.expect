import "primitives/binary_operators.futil";
import "primitives/core.futil";
import "primitives/math.futil";
import "primitives/memories/comb.futil";
import "primitives/memories/seq.futil";

component main() -> () {
  cells {
    @data add = std_add(32);
    @data mult = std_mult_pipe(32);
    @data r0 = std_reg(32);
    @data r1 = std_reg(32);
    @generated comb_reg = std_reg(32);
  }
  wires {
    static<3> group invoke10 {
      mult.go = 1'd1;
      mult.right = 32'd2;
      mult.left = 32'd1;
    }
    static<1> group invoke20 {
      r0.write_en = 1'd1;
      r0.in = mult.out;
    }
    static<1> group invoke00 {
      r0.write_en = 1'd1;
      r0.in = add.out;
      add.right = 32'd2;
      add.left = 32'd1;
    }
  }
  control {
    @static(5) static seq {
      @promotable invoke00;
      @promotable(3) invoke10;
      @promotable invoke20;
    }
  }
}
