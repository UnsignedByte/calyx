import "primitives/core.futil";
import "primitives/binary_operators.futil";

component Q(in1: 32, in2: 32) -> (out: 32) {
  cells {
    guard_output = std_reg(32);
  }
  wires {
    group simulate_guard_output {
      // write 1 if inputs are the same, 0 otherwise
      guard_output.in = !(in1 == in2) ? 32'd0;
      guard_output.in = in1 == in2 ? 32'd1;
      guard_output.write_en = 1'b1;
      simulate_guard_output[done] = guard_output.done;
    }
    out = guard_output.out;
  }
  control {
    seq {simulate_guard_output;}
  }
}

component main() -> () {
  cells {
    @external(1) mem = std_mem_d1(32, 3, 2);
    reg1 = std_reg(32);
    reg2 = std_reg(32);
    comp_Q = Q();
    output_Q1 = std_reg(32);
  }
  wires {
    group through_Q {
      // doesnt trigger either input of Q
      comp_Q.go = 1'b1;

      // comp_Q.in1 = 32'd0; 
      // comp_Q.in2 = 32'd0;

      through_Q[done] = comp_Q.done;
    }

    group store_output_Q {
      // store output to register
      output_Q1.write_en = 1'b1;
      output_Q1.in = comp_Q.out;
      store_output_Q[done] = output_Q1.done;
    }

    group output_Q_to_mem {
      // write output to memory 
      mem.addr0 = 2'd2;
      mem.write_data = output_Q1.out;
      mem.write_en = 1'b1;
      output_Q_to_mem[done] = mem.done;
    }

  }
  control {
    seq{
      through_Q;
      store_output_Q;
      output_Q_to_mem;
    }
  }
}